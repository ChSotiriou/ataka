import typer

from typing import List
from player_cli.ctfconfig_wrapper import STATIC_EXCLUSIONS
from player_cli.util import request, check_response, greenify, redify, WARN_STR, ERROR_STR

app = typer.Typer()


def _print_exploit_targets(history_data, indent=0):
    indent = ' ' * indent

    resp = request('GET', f'exploit_history/{history_data["id"]}/exclusions')
    check_response(resp)

    exclude_ips = set(resp['target_ips'])

    columns = typer.get_terminal_size()[0] // 24

    i = 0
    targets = request('GET', f'targets/service/{history_data["service"]}')
    target_set = set([x['ip'] for x in targets]) | exclude_ips
    try:
        target_set = sorted(target_set, key=lambda x: [int(a) for a in x.split(".")])
    except:
        try:
            target_set = sorted(target_set, key=lambda x: [0 if a == '' else int(a, base=16) for a in x.split(":")])
        except:
            pass
        pass

    for ip in target_set:
        if ip in STATIC_EXCLUSIONS:
            continue
        status = redify('OFF') if ip in exclude_ips else greenify('ON ')
        if i % columns == 0:
            typer.echo(indent, nl=False)
        typer.echo(f'{status} {ip.ljust(20)}', nl=(i % columns) == (columns - 1))
        i += 1

    if i % columns > 0:
        typer.echo()


@app.command('ls', help='List exploit targets.')
def exploit_target_ls(
        history_id: str = typer.Argument(..., help='History ID.')
):
    history = request('GET', f'exploit_history/{history_id}')
    check_response(history)

    _print_exploit_targets(history['history'])


@app.command('on', help='Turn on exploit targets.')
def exploit_target_on(
        history_id: str = typer.Argument(..., help='History ID.'),
        target_ips: List[str] = typer.Argument(None, help='Target IP(s).'),
        all_flag: bool = typer.Option(False, '--all', help='Turn on all targets.')
):
    target_ips = set(target_ips)

    if all_flag and target_ips:
        typer.echo(f'{ERROR_STR}: you specified both --all and target IP(s), this is probably a mistake')
        raise typer.Exit(code=1)
    if not all_flag and not target_ips:
        typer.echo(f'{ERROR_STR}: no target IP(s) specified (did you want --all?)')
        raise typer.Exit(code=1)

    history = request('GET', f'exploit_history/{history_id}')
    check_response(history)
    targets = request('GET', f'targets/service/{history["history"]["service"]}')
    target_set = set([x['ip'] for x in targets])

    if not all_flag:
        for ip in target_ips:
            if ip in STATIC_EXCLUSIONS:
                typer.echo(f'{WARN_STR}: ignoring target {ip} (static exclusion)')
            elif ip not in target_set:
                typer.echo(f'{WARN_STR}: unknown target {ip}')

    resp = request('GET', f'exploit_history/{history_id}/exclusions')
    check_response(resp)

    exclude_ips = set(resp['target_ips'])
    if all_flag:
        new_exclude_ips = set()
    else:
        new_exclude_ips = exclude_ips - (target_ips - STATIC_EXCLUSIONS)

    if new_exclude_ips != exclude_ips:
        check_response(
            request('PUT', f'exploit_history/{history_id}/exclusions', data={
                'target_ips': list(new_exclude_ips),
            })
        )

    exploit_target_ls(history_id)


@app.command('off', help='Turn off exploit targets.')
def exploit_target_off(
        history_id: str = typer.Argument(..., help='History ID.'),
        target_ips: List[str] = typer.Argument(None, help='Target IP(s).'),
        all_flag: bool = typer.Option(False, '--all', help='Turn on all targets.'),
        force: bool = typer.Option(False, '--force', help=
        'Allow exclusion of unknown targets.')
):
    target_ips = set(target_ips)

    if all_flag and target_ips:
        typer.echo(f'{ERROR_STR}: you specified both --all and target IP(s), this is probably a mistake')
        raise typer.Exit(code=1)
    if not all_flag and not target_ips:
        typer.echo(f'{ERROR_STR}: no target IP(s) specified (did you want --all?)')
        raise typer.Exit(code=1)

    history = request('GET', f'exploit_history/{history_id}')
    check_response(history)
    targets = request('GET', f'targets/service/{history["history"]["service"]}')
    target_set = set([x['ip'] for x in targets])

    if all_flag:
        target_ips = target_set
    else:
        for ip in target_ips:
            if ip in STATIC_EXCLUSIONS:
                typer.echo(f'{WARN_STR}: ignoring target {ip} (static exclusion)')
            elif ip not in target_set:
                if force:
                    typer.echo(f'{WARN_STR}: unknown target {ip} (proceeding anyway)')
                else:
                    typer.echo(f'{ERROR_STR}: unknown target {ip} (use --force to exclude anyway)')
                    raise typer.Exit(code=1)

    resp = request('GET', f'exploit_history/{history_id}/exclusions')
    check_response(resp)

    exclude_ips = set(resp['target_ips'])
    new_exclude_ips = exclude_ips | (target_ips - STATIC_EXCLUSIONS)

    if new_exclude_ips != exclude_ips:
        check_response(
            request('PUT', f'exploit_history/{history_id}/exclusions', data={
                'target_ips': list(new_exclude_ips),
            })
        )

    exploit_target_ls(history_id)
