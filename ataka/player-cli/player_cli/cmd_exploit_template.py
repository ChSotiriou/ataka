import os
import typer

from player_cli.cmd_exploit import app
from player_cli.util import make_executable, ERROR_STR, WARN_STR


@app.command('template', help='Generate an exploit stub from a template.')
def exploit_template(
    template: str = typer.Argument(..., help=
        'Template to use, one of: python, ubuntu. '
        'Optionally, you can specify a Docker tag (e.g., python:3.9-slim). '
        'If none is specified, the latest will be used.'),
    path: str = typer.Argument(..., help='Destination directory.'),
    overwrite: bool = typer.Option(False, '--overwrite', help=
        'Proceed even if the destination directory already exists.')
):

    files = {}
    exes = set()
    if template == 'python' or template.startswith('python:'):
        image = 'python:latest' if template == 'python' else template
        files['Dockerfile'] = f"""FROM {image}

RUN pip install --no-cache-dir --upgrade pip

RUN pip install --no-cache-dir pwntools cryptography beautifulsoup4 requests

WORKDIR /exploit

COPY requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt

COPY . .

CMD [ "python3", "exploit.py" ]
"""
        files['exploit.py'] = """#!/usr/bin/env python3

import os
import json
import time
import random
import string

# Work around rate limits
time.sleep(random.uniform(0, 10))
# Remember to sleep at least 1s between subsequent TCP connections within this exploit

### HELPERS ###
def gen_random(n):
    return ''.join(random.choice(string.ascii_lowercase + string.ascii_uppercase) for i in range(n))

try:
  useragents = open('useragents.txt').read().splitlines()
  useragent = random.choice(useragents)
except:
  useragent = "python-requests/2.26.0"

# Pick what you need. some examples given here
headers = {'User-Agent': useragent,
           'Accept-Language': 'en-US,en;q=0.5',
           'Content-Type': 'application/x-www-form-urlencoded',
           'Upgrade-Insecure-Requests': '1'}

### END HELPERS ###

HOST = os.getenv('TARGET_IP')
EXTRA = json.loads(os.getenv('TARGET_EXTRA', '[]'))

print('ECSC_AAAAAAAAABBBBBBBBCCCCCCCDDDDDDDD')
"""
        files["requirements.txt"] = ""
        exes.add('exploit.py')

    elif template == 'ubuntu' or template.startswith('ubuntu:'):
        image = 'ubuntu:latest' if template == 'ubuntu' else template
        files['Dockerfile'] = f"""FROM {image}

RUN apt-get -y update

RUN apt-get install -y curl

WORKDIR /exploit

COPY . .

CMD [ "bash", "exploit.sh" ]
"""
        files['exploit.sh'] = """#!/bin/bash

curl $TARGET_IP
"""

        exes.add('exploit.sh')
    else:
        msg = f'unknown template "{template}"'
        raise typer.BadParameter(msg, param_hint='TEMPLATE')

    try:
        os.mkdir(path)
    except FileExistsError:
        if overwrite:
            typer.echo(f'{WARN_STR}: directory "{path}" already exists (proceeding anyway)')
        else:
            typer.echo(f'{ERROR_STR}: directory "{path}" already exists (use --overwrite to proceed anyway)')
            raise typer.Exit(code=1)

    for name, contents in files.items():
        file_path = os.path.join(path, name)
        with open(file_path, 'wb') as f:
            if isinstance(contents, str):
                contents = contents.encode()
            f.write(contents)
        if name in exes:
            make_executable(file_path)
