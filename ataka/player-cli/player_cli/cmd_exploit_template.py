import os
import typer

from player_cli.cmd_exploit import app
from player_cli.util import make_executable, ERROR_STR, WARN_STR


@app.command('template', help='Generate an exploit stub from a template.')
def exploit_template(
    template: str = typer.Argument(..., help=
        'Template to use, one of: python, ubuntu. '
        'Optionally, you can specify a Docker tag (e.g., python:3.9-slim). '
        'If none is specified, the latest will be used.'),
    path: str = typer.Argument(..., help='Destination directory.'),
    overwrite: bool = typer.Option(False, '--overwrite', help=
        'Proceed even if the destination directory already exists.')
):

    files = {}
    exes = set()
    if template == 'python' or template.startswith('python:'):
        image = 'python:latest' if template == 'python' else template
        files['Dockerfile'] = f"""FROM {image}

RUN pip install --no-cache-dir --upgrade pip

RUN pip install --no-cache-dir pwntools cryptography beautifulsoup4 requests

WORKDIR /exploit

COPY requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt

COPY . .

CMD [ "python3", "exploit.py" ]
"""
        files['exploit.py'] = """#!/usr/bin/env python3

import os
import json

HOST = os.getenv('TARGET_IP')
EXTRA = json.loads(os.getenv('TARGET_EXTRA', '[]'))

print('FLAG{AAAAAAAAABBBBBBBBCCCCCCCDDDDDDDD}')
"""
        exes.add('exploit.py')
        files['signer.py'] = '''import ed25519_blake2b


SECRET_KEY = bytes([
    0xd1, 0x84, 0x05, 0x28, 0x99, 0x57, 0x9e, 0xc1, 0xdc, 0x58, 0x05, 0x59,
    0x75, 0x49, 0x89, 0x46, 0x0d, 0x17, 0xdd, 0x07, 0xcc, 0xcf, 0x48, 0xe5,
    0xa4, 0x9f, 0x21, 0x23, 0x63, 0xd8, 0xd2, 0xf2
])


def sign(data, hex=True):
    """
    Sign data using the team's secret key. Returns the signature.
    If hex is True, data and signature are hex strings.
    If hex is False, data and signature are bytes.
    """

    if isinstance(data, str):
        data = data.encode()
    if hex:
        s = data.decode().strip().replace('\\n', '').replace(' ', '')
        data = bytes.fromhex(s)

    sk = ed25519_blake2b.SigningKey(SECRET_KEY)
    signature = sk.sign(data)

    if hex:
        signature = signature.hex()
    return signature
'''
        files['requirements.txt'] = 'ed25519-blake2b\n'
    elif template == 'ubuntu' or template.startswith('ubuntu:'):
        image = 'ubuntu:latest' if template == 'ubuntu' else template
        files['Dockerfile'] = f"""FROM {image}

RUN apt-get -y update

RUN apt-get install -y curl

WORKDIR /exploit

COPY . .

CMD [ "bash", "exploit.sh" ]
"""
        files['exploit.sh'] = """#!/bin/bash

curl $TARGET_IP
"""
        exes.add('exploit.sh')
    else:
        msg = f'unknown template "{template}"'
        raise typer.BadParameter(msg, param_hint='TEMPLATE')

    try:
        os.mkdir(path)
    except FileExistsError:
        if overwrite:
            typer.echo(f'{WARN_STR}: directory "{path}" already exists (proceeding anyway)')
        else:
            typer.echo(f'{ERROR_STR}: directory "{path}" already exists (use --overwrite to proceed anyway)')
            raise typer.Exit(code=1)

    for name, contents in files.items():
        file_path = os.path.join(path, name)
        with open(file_path, 'wb') as f:
            if isinstance(contents, str):
                contents = contents.encode()
            f.write(contents)
        if name in exes:
            make_executable(file_path)